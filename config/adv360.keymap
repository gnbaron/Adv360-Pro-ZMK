#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define KEYS_L 0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 46 47 48 49 50 51 60 61 62 63 64
#define THUMBS_LEFT 35 36 52 65 66 67
#define KEYS_R 7 8 9 10 11 12 13 21 22 23 24 25 26 27 39 40 41 42 43 44 45 54 55 56 57 58 59 71 72 73 74 75
#define THUMBS_RIGHT 37 38 53 68 69 70

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>; // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release; // delay positional check until key-release
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>; // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release; // delay positional check until key-release
        };
    };

    macros {
        ZMK_MACRO(dot_spc,

        wait-ms = <0>;
        tap-ms = <5>;
        bindings = <&kp DOT &kp SPACE &sk LSHFT>;

        )

        dot_space: dot_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&caps_word>;
            label = "DOT_SPACE";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <32 41>;
            bindings = <&caps_word>;
            layers = <base>;
        };

        // sticky shift after dot and space

        combo_dot_spc {
            timeout-ms = <50>;
            key-positions = <57 69>;
            bindings = <&dot_spc>;
            layers = <base>;
        };

        // =

        combo_equal {
            timeout-ms = <50>;
            key-positions = <40 41>;
            bindings = <&kp EQUAL>;
            layers = <base>;
        };

        // {

        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp LBRC>;
            layers = <base>;
        };

        // }

        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <24 25>;
            bindings = <&kp RBRC>;
            layers = <base>;
        };

        // (

        combo_lpar {
            timeout-ms = <50>;
            key-positions = <41 42>;
            bindings = <&kp LPAR>;
            layers = <base>;
        };

        // )

        combo_rpar {
            timeout-ms = <50>;
            key-positions = <42 43>;
            bindings = <&kp RPAR>;
            layers = <base>;
        };

        // <

        combo_lt {
            timeout-ms = <50>;
            key-positions = <55 56>;
            bindings = <&kp LT>;
            layers = <base>;
        };

        // >

        combo_gt {
            timeout-ms = <50>;
            key-positions = <56 57>;
            bindings = <&kp GT>;
            layers = <base>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&none  &none        &none        &none         &none          &none  &none                                                            &none            &none  &none          &none         &none        &none                &none
&none  &kp Q        &kp W        &kp E         &kp R          &kp T  &none                                                            &none            &kp Y  &kp U          &kp I         &kp O        &kp P                &none
&none  &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHIFT F  &kp G  &none         &none      &none          &none         &none      &none            &kp H  &hmr RSHIFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMICOLON  &none
&none  &kp Z        &kp X        &kp C         &kp V          &kp B                           &none          &none                                     &kp N  &kp M          &kp COMMA     &kp DOT      &kp FSLH             &none
&none  &none        &none        &none         &none                 &lt 1 ESCAPE  &kp ENTER  &lt 4 TAB      &lt 3 DELETE  &kp SPACE  &lt 2 BACKSPACE         &none          &none         &none        &none                &none
            >;
        };

        lower {
            bindings = <
&trans  &trans        &trans        &trans      &trans          &trans      &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans      &trans          &trans      &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL   &kp LEFT_SHIFT  &trans      &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp K_UNDO    &kp K_CUT     &kp K_COPY  &kp K_PASTE     &kp K_REDO                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans      &trans                      &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        raise {
            bindings = <
&trans  &trans        &trans           &trans           &trans           &trans  &trans                                               &trans  &trans    &trans         &trans       &trans     &trans             &trans
&trans  &trans        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans  &trans                                               &trans  &trans    &trans         &trans       &trans     &trans             &trans
&trans  &kp LEFT_GUI  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans  &trans           &trans  &trans      &trans  &trans  &trans  &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &kp RIGHT_COMMAND  &trans
&trans  &trans        &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans                           &trans      &trans                  &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans             &trans
&trans  &trans        &trans           &trans           &trans                   &kp KP_NUMBER_0  &trans  &trans      &trans  &trans  &trans            &trans         &trans       &trans     &trans             &trans
            >;
        };

        fn {
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans  &trans                                      &trans  &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans                  &trans      &trans                  &trans  &trans     &trans     &trans    &trans    &trans
&trans  &trans   &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans     &trans     &trans    &trans    &trans
            >;
        };

        adjust {
            bindings = <
&trans  &trans      &trans        &trans                   &trans                   &trans                   &trans                                                        &trans      &trans      &trans                &trans                &trans  &trans  &trans
&trans  &bt BT_CLR  &trans        &kp LS(LG(KP_NUMBER_3))  &kp LS(LG(KP_NUMBER_4))  &kp LS(LG(KP_NUMBER_5))  &trans                                                        &trans      &trans      &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans  &trans  &trans
&trans  &trans      &bl BL_TOG    &bl BL_DEC               &bl BL_INC               &trans                   &trans  &trans  &trans      &trans          &trans            &trans      &kp C_MUTE  &kp C_VOL_DN          &kp C_VOL_UP          &trans  &trans  &trans
&trans  &trans      &bt BT_SEL 0  &bt BT_SEL 1             &bt BT_SEL 2             &trans                                   &trans      &trans                                        &trans      &trans                &trans                &trans  &trans  &trans
&trans  &trans      &trans        &trans                   &trans                                            &trans  &trans  &trans      &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT              &trans                &trans                &trans  &trans  &trans
            >;
        };
    };
};

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define KEYS_L 0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 46 47 48 49 50 51 60 61 62 63 64
#define THUMBS_LEFT 35 36 52 65 66 67
#define KEYS_R 7 8 9 10 11 12 13 21 22 23 24 25 26 27 39 40 41 42 43 44 45 54 55 56 57 58 59 71 72 73 74 75
#define THUMBS_RIGHT 37 38 53 68 69 70
#define BASE 0
#define LOWER 1
#define RAISE 2
#define FN 3
#define ADJUST 4

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>; // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release; // delay positional check until key-release
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>; // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release; // delay positional check until key-release
        };

        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        star_morph: star_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "STAR_MORPH";
            #binding-cells = <0>;
            bindings = <&kp ASTERISK>, <&kp HASH>;

            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        caret_morph: caret_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "CARET_MORPH";
            #binding-cells = <0>;
            bindings = <&kp CARET>, <&kp LC(NUMBER_6)>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
    };

    macros {
        dot_space: dot_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
            label = "DOT_SPACE";
            wait-ms = <0>;
            tap-ms = <5>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // smart caps lock

        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <32 41>;
            bindings = <&caps_word>;
            layers = <0>;
        };

        // sticky shift after dot and space

        combo_dot_spc {
            timeout-ms = <50>;
            key-positions = <57 69>;
            bindings = <&dot_space>;
            layers = <0>;
        };

        // =

        combo_equal {
            timeout-ms = <50>;
            key-positions = <40 41>;
            bindings = <&kp EQUAL>;
            layers = <0>;
        };

        // {

        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp LBRC>;
            layers = <0>;
        };

        // }

        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <24 25>;
            bindings = <&kp RBRC>;
            layers = <0>;
        };

        // (

        combo_lpar {
            timeout-ms = <50>;
            key-positions = <41 42>;
            bindings = <&kp LPAR>;
            layers = <0>;
        };

        // )

        combo_rpar {
            timeout-ms = <50>;
            key-positions = <42 43>;
            bindings = <&kp RPAR>;
            layers = <0>;
        };

        // <

        combo_lt {
            timeout-ms = <50>;
            key-positions = <55 56>;
            bindings = <&kp LT>;
            layers = <0>;
        };

        // >

        combo_gt {
            timeout-ms = <50>;
            key-positions = <56 57>;
            bindings = <&kp GT>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp EQUAL  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &none                                                                 &none          &kp N6  &kp N7  &kp N8     &kp N9   &kp N0    &kp MINUS
&lt 3 TAB  &kp Q   &kp W   &kp E   &kp R   &kp T   &none                                                                 &none          &kp Y   &kp U   &kp I      &kp O    &kp P     &kp BSLH
&kp ESC    &kp A   &kp S   &kp D   &kp F   &kp G   &none      &none        &none             &none     &none             &none          &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X   &kp C   &kp V   &kp B                           &none             &none                                      &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
&none      &none   &none   &none   &none           &kp SPACE  &lt 1 ENTER  &kp LEFT_ALT      &kp LGUI  &kp LEFT_CONTROL  &kp BACKSPACE          &none   &none      &none    &none     &none
            >;
        };

        sym {
            bindings = <
&trans  &trans     &trans     &trans     &trans     &trans        &trans                                      &trans           &trans            &trans             &trans                &trans                 &trans           &trans
&trans  &trans     &trans     &trans     &trans     &kp LC(DOWN)  &trans                                      &trans           &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PERCENT      &trans
&trans  &trans     &trans     &trans     &trans     &kp LA(UP)    &trans  &trans  &trans      &trans  &trans  &trans           &star_morph       &kp EQUAL          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AMPS         &kp GRAVE
&trans  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &trans                        &trans      &trans                           &caret_morph      &kp DOLLAR         &kp LT                &kp GT                 &kp EXCLAMATION  &trans
&trans  &trans     &trans     &trans     &trans                   &trans  &trans  &trans      &trans  &trans  &lt 2 BACKSPACE                    &trans             &trans                &trans                 &trans           &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans    &trans         &trans       &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans    &trans         &trans       &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans            &trans         &trans       &trans     &trans  &trans
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &trans                                                        &trans      &kp F7      &kp F8                &kp F9                &kp F10       &kp F11     &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                                        &trans      &trans      &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &bl BL_DEC    &bl BL_INC  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans          &trans            &trans      &kp C_MUTE  &kp C_VOL_DN          &kp C_VOL_UP          &bl BL_TOG    &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                                        &trans      &bt BT_SEL 0          &bt BT_SEL 1          &bt BT_SEL 2  &bt BT_CLR  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT              &trans                &trans                &trans        &trans      &trans
            >;
        };
    };
};
